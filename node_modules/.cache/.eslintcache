[{"/Users/yoonchairyeon/simplediary/src/index.js":"1","/Users/yoonchairyeon/simplediary/src/App.js":"2","/Users/yoonchairyeon/simplediary/src/DiaryEditor.js":"3","/Users/yoonchairyeon/simplediary/src/DiaryList.js":"4","/Users/yoonchairyeon/simplediary/src/DiaryItem.js":"5"},{"size":228,"mtime":1657519672559,"results":"6","hashOfConfig":"7"},{"size":3133,"mtime":1657519629797,"results":"8","hashOfConfig":"7"},{"size":2193,"mtime":1657519642446,"results":"9","hashOfConfig":"7"},{"size":520,"mtime":1657519663633,"results":"10","hashOfConfig":"7"},{"size":2072,"mtime":1657519651774,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15weuwm",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yoonchairyeon/simplediary/src/index.js",[],[],"/Users/yoonchairyeon/simplediary/src/App.js",["29","30"],[],"import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  createContext\n} from \"react\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport \"./App.css\";\n\nexport const DiaryStateContext = createContext(null);\nexport const DiaryDispatchContext = createContext(null);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\": {\n      return action.data;\n    }\n    case \"CREATE\": {\n      const created_date = new Date().getTime();\n\n      const newItem = {\n        ...action.data,\n        created_date\n      };\n      return [newItem, ...state];\n    }\n    case \"REMOVE\": {\n      return state.filter((it) => it.id !== action.targetId);\n    }\n    case \"EDIT\": {\n      return state.map((it) =>\n        it.id === action.targetId\n          ? {\n              ...it,\n              content: action.newContent\n            }\n          : it\n      );\n    }\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [data, dispatch] = useReducer(reducer, []);\n  const dataId = useRef(0);\n  const getData = async () => {\n    setTimeout(async () => {\n      const res = await fetch(\n        \"https://jsonplaceholder.typicode.com/comments\"\n      ).then((res) => res.json());\n\n      const initData = res.slice(0, 20).map((it) => {\n        return {\n          author: it.email,\n          content: it.body,\n          emotion: Math.floor(Math.random() * 5) + 1,\n          created_date: new Date().getTime(),\n          id: dataId.current++\n        };\n      });\n\n      dispatch({ type: \"INIT\", data: initData });\n    }, 2000);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: { author, content, emotion, id: dataId.current }\n    });\n    dataId.current += 1;\n  }, []);\n\n  const onRemove = useCallback((targetId) => {\n    dispatch({ type: \"REMOVE\", targetId });\n  }, []);\n\n  const onEdit = useCallback((targetId, newContent) => {\n    dispatch({\n      type: \"EDIT\",\n      targetId,\n      newContent\n    });\n  }, []);\n\n  const memoizedDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter((it) => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = (goodCount / data.length) * 100.0;\n    return { goodCount, badCount, goodRatio };\n  }, [data.length]);\n\n  const { goodCount, badCount, goodRatio } = memoizedDiaryAnalysis;\n\n  const store = {\n    data\n  };\n\n  const memoizedDispatch = useMemo(() => {\n    return { onCreate, onRemove, onEdit };\n  }, []);\n\n  return (\n    <DiaryStateContext.Provider value={store}>\n      <DiaryDispatchContext.Provider value={memoizedDispatch}>\n        <div className=\"App\">\n          <DiaryEditor />\n          <div>전체 일기 : {data.length}</div>\n          <div>기분 좋은 일기 개수 : {goodCount}</div>\n          <div>기분 나쁜 일기 개수 : {badCount}</div>\n          <div>기분 좋은 일기 비율 : {goodRatio}%</div>\n          <DiaryList />\n        </div>\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  );\n};\n\nexport default App;\n","/Users/yoonchairyeon/simplediary/src/DiaryEditor.js",["31"],[],"import React, { memo, useContext, useEffect, useRef, useState } from \"react\";\nimport { DiaryDispatchContext } from \"./App\";\n\nconst DiaryEditor = () => {\n  const { onCreate } = useContext(DiaryDispatchContext);\n  useEffect(() => {\n    console.log(\"DiaryEditor 렌더\");\n  });\n\n  const [diary, setDiary] = useState({\n    author: \"\",\n    content: \"\",\n    emotion: 1\n  });\n\n  const handleChangeDiary = (e) => {\n    setDiary({\n      ...diary,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleAddButtonClick = () => {\n    alert(\"일기가 추가되었어요!\");\n    return;\n    console.log(\"추가될 일기 : \", diary);\n\n    if (diary.author.length < 1) {\n      authorRef.current.focus();\n      return;\n    }\n\n    if (diary.content.length < 1) {\n      contentRef.current.focus();\n      return;\n    }\n\n    onCreate(diary.author, diary.content, diary.emotion);\n    alert(\"일기가 성공적으로 추가되었습니다\");\n\n    setDiary({\n      author: \"\",\n      content: \"\",\n      emotion: 1\n    });\n  };\n\n  const authorRef = useRef(null);\n  const contentRef = useRef(null);\n\n  return (\n    <div className=\"DiaryEditor_container\">\n      <h2>오늘의 일기</h2>\n      <div>\n        <input\n          ref={authorRef}\n          name=\"author\"\n          placeholder=\"작성자\"\n          type=\"text\"\n          value={diary.author}\n          onChange={handleChangeDiary}\n        />\n      </div>\n      <div>\n        <textarea\n          ref={contentRef}\n          name=\"content\"\n          placeholder=\"일기\"\n          type=\"text\"\n          value={diary.content}\n          onChange={handleChangeDiary}\n        />\n      </div>\n      <div>\n        <span>오늘의 감정점수 : </span>\n        <select\n          name=\"emotion\"\n          value={diary.emotion}\n          onChange={handleChangeDiary}\n        >\n          <option value={1}>1</option>\n          <option value={2}>2</option>\n          <option value={3}>3</option>\n          <option value={4}>4</option>\n          <option value={5}>5</option>\n        </select>\n      </div>\n      <div>\n        <button onClick={handleAddButtonClick}>일기 저장하기</button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(DiaryEditor);\n","/Users/yoonchairyeon/simplediary/src/DiaryList.js",[],[],"/Users/yoonchairyeon/simplediary/src/DiaryItem.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":100,"column":6,"nodeType":"34","endLine":100,"endColumn":19,"suggestions":"35"},{"ruleId":"32","severity":1,"message":"36","line":110,"column":6,"nodeType":"34","endLine":110,"endColumn":8,"suggestions":"37"},{"ruleId":"38","severity":1,"message":"39","line":26,"column":5,"nodeType":"40","messageId":"41","endLine":45,"endColumn":8},"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["42"],"React Hook useMemo has missing dependencies: 'onCreate', 'onEdit', and 'onRemove'. Either include them or remove the dependency array.",["43"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode",{"desc":"44","fix":"45"},{"desc":"46","fix":"47"},"Update the dependencies array to be: [data]",{"range":"48","text":"49"},"Update the dependencies array to be: [onCreate, onEdit, onRemove]",{"range":"50","text":"51"},[2359,2372],"[data]",[2569,2571],"[onCreate, onEdit, onRemove]"]